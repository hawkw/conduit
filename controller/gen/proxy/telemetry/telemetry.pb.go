// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proxy/telemetry/telemetry.proto

/*
Package conduit_proxy_telemetry is a generated protocol buffer package.

It is generated from these files:
	proxy/telemetry/telemetry.proto

It has these top-level messages:
	ReportRequest
	Process
	ServerTransport
	ClientTransport
	TransportSummary
	RequestScope
	RequestCtx
	LatencyBucket
	ResponseScope
	ResponseCtx
	EosScope
	EosCtx
	StreamSummary
	ReportResponse
*/
package conduit_proxy_telemetry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import conduit_common "github.com/runconduit/conduit/controller/gen/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReportRequest_Proxy int32

const (
	ReportRequest_INBOUND  ReportRequest_Proxy = 0
	ReportRequest_OUTBOUND ReportRequest_Proxy = 1
)

var ReportRequest_Proxy_name = map[int32]string{
	0: "INBOUND",
	1: "OUTBOUND",
}
var ReportRequest_Proxy_value = map[string]int32{
	"INBOUND":  0,
	"OUTBOUND": 1,
}

func (x ReportRequest_Proxy) String() string {
	return proto.EnumName(ReportRequest_Proxy_name, int32(x))
}
func (ReportRequest_Proxy) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ReportRequest struct {
	Process          *Process            `protobuf:"bytes,1,opt,name=process" json:"process,omitempty"`
	Proxy            ReportRequest_Proxy `protobuf:"varint,2,opt,name=proxy,enum=conduit.proxy.telemetry.ReportRequest_Proxy" json:"proxy,omitempty"`
	ServerTransports []*ServerTransport  `protobuf:"bytes,3,rep,name=server_transports,json=serverTransports" json:"server_transports,omitempty"`
	ClientTransports []*ClientTransport  `protobuf:"bytes,4,rep,name=client_transports,json=clientTransports" json:"client_transports,omitempty"`
	Requests         []*RequestScope     `protobuf:"bytes,5,rep,name=requests" json:"requests,omitempty"`
}

func (m *ReportRequest) Reset()                    { *m = ReportRequest{} }
func (m *ReportRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportRequest) ProtoMessage()               {}
func (*ReportRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReportRequest) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *ReportRequest) GetProxy() ReportRequest_Proxy {
	if m != nil {
		return m.Proxy
	}
	return ReportRequest_INBOUND
}

func (m *ReportRequest) GetServerTransports() []*ServerTransport {
	if m != nil {
		return m.ServerTransports
	}
	return nil
}

func (m *ReportRequest) GetClientTransports() []*ClientTransport {
	if m != nil {
		return m.ClientTransports
	}
	return nil
}

func (m *ReportRequest) GetRequests() []*RequestScope {
	if m != nil {
		return m.Requests
	}
	return nil
}

type Process struct {
	Node               string `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	ScheduledInstance  string `protobuf:"bytes,2,opt,name=scheduled_instance,json=scheduledInstance" json:"scheduled_instance,omitempty"`
	ScheduledNamespace string `protobuf:"bytes,3,opt,name=scheduled_namespace,json=scheduledNamespace" json:"scheduled_namespace,omitempty"`
}

func (m *Process) Reset()                    { *m = Process{} }
func (m *Process) String() string            { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()               {}
func (*Process) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Process) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *Process) GetScheduledInstance() string {
	if m != nil {
		return m.ScheduledInstance
	}
	return ""
}

func (m *Process) GetScheduledNamespace() string {
	if m != nil {
		return m.ScheduledNamespace
	}
	return ""
}

type ServerTransport struct {
	SourceIp    *conduit_common.IPAddress `protobuf:"bytes,1,opt,name=source_ip,json=sourceIp" json:"source_ip,omitempty"`
	Connects    uint32                    `protobuf:"varint,2,opt,name=connects" json:"connects,omitempty"`
	Disconnects []*TransportSummary       `protobuf:"bytes,3,rep,name=disconnects" json:"disconnects,omitempty"`
	Protocol    conduit_common.Protocol   `protobuf:"varint,4,opt,name=protocol,enum=conduit.common.Protocol" json:"protocol,omitempty"`
}

func (m *ServerTransport) Reset()                    { *m = ServerTransport{} }
func (m *ServerTransport) String() string            { return proto.CompactTextString(m) }
func (*ServerTransport) ProtoMessage()               {}
func (*ServerTransport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServerTransport) GetSourceIp() *conduit_common.IPAddress {
	if m != nil {
		return m.SourceIp
	}
	return nil
}

func (m *ServerTransport) GetConnects() uint32 {
	if m != nil {
		return m.Connects
	}
	return 0
}

func (m *ServerTransport) GetDisconnects() []*TransportSummary {
	if m != nil {
		return m.Disconnects
	}
	return nil
}

func (m *ServerTransport) GetProtocol() conduit_common.Protocol {
	if m != nil {
		return m.Protocol
	}
	return conduit_common.Protocol_HTTP
}

type ClientTransport struct {
	TargetAddr  *conduit_common.TcpAddress `protobuf:"bytes,1,opt,name=target_addr,json=targetAddr" json:"target_addr,omitempty"`
	Connects    uint32                     `protobuf:"varint,2,opt,name=connects" json:"connects,omitempty"`
	Disconnects []*TransportSummary        `protobuf:"bytes,3,rep,name=disconnects" json:"disconnects,omitempty"`
	Protocol    conduit_common.Protocol    `protobuf:"varint,4,opt,name=protocol,enum=conduit.common.Protocol" json:"protocol,omitempty"`
}

func (m *ClientTransport) Reset()                    { *m = ClientTransport{} }
func (m *ClientTransport) String() string            { return proto.CompactTextString(m) }
func (*ClientTransport) ProtoMessage()               {}
func (*ClientTransport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ClientTransport) GetTargetAddr() *conduit_common.TcpAddress {
	if m != nil {
		return m.TargetAddr
	}
	return nil
}

func (m *ClientTransport) GetConnects() uint32 {
	if m != nil {
		return m.Connects
	}
	return 0
}

func (m *ClientTransport) GetDisconnects() []*TransportSummary {
	if m != nil {
		return m.Disconnects
	}
	return nil
}

func (m *ClientTransport) GetProtocol() conduit_common.Protocol {
	if m != nil {
		return m.Protocol
	}
	return conduit_common.Protocol_HTTP
}

type TransportSummary struct {
	DurationMs uint64 `protobuf:"varint,1,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	BytesSent  uint64 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent,omitempty"`
}

func (m *TransportSummary) Reset()                    { *m = TransportSummary{} }
func (m *TransportSummary) String() string            { return proto.CompactTextString(m) }
func (*TransportSummary) ProtoMessage()               {}
func (*TransportSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TransportSummary) GetDurationMs() uint64 {
	if m != nil {
		return m.DurationMs
	}
	return 0
}

func (m *TransportSummary) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

type RequestScope struct {
	Ctx       *RequestCtx      `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Count     uint32           `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Responses []*ResponseScope `protobuf:"bytes,3,rep,name=responses" json:"responses,omitempty"`
}

func (m *RequestScope) Reset()                    { *m = RequestScope{} }
func (m *RequestScope) String() string            { return proto.CompactTextString(m) }
func (*RequestScope) ProtoMessage()               {}
func (*RequestScope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RequestScope) GetCtx() *RequestCtx {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *RequestScope) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RequestScope) GetResponses() []*ResponseScope {
	if m != nil {
		return m.Responses
	}
	return nil
}

type RequestCtx struct {
	SourceIp   *conduit_common.IPAddress  `protobuf:"bytes,1,opt,name=source_ip,json=sourceIp" json:"source_ip,omitempty"`
	TargetAddr *conduit_common.TcpAddress `protobuf:"bytes,2,opt,name=target_addr,json=targetAddr" json:"target_addr,omitempty"`
	Authority  string                     `protobuf:"bytes,3,opt,name=authority" json:"authority,omitempty"`
	Method     *conduit_common.HttpMethod `protobuf:"bytes,4,opt,name=method" json:"method,omitempty"`
	Path       string                     `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
}

func (m *RequestCtx) Reset()                    { *m = RequestCtx{} }
func (m *RequestCtx) String() string            { return proto.CompactTextString(m) }
func (*RequestCtx) ProtoMessage()               {}
func (*RequestCtx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RequestCtx) GetSourceIp() *conduit_common.IPAddress {
	if m != nil {
		return m.SourceIp
	}
	return nil
}

func (m *RequestCtx) GetTargetAddr() *conduit_common.TcpAddress {
	if m != nil {
		return m.TargetAddr
	}
	return nil
}

func (m *RequestCtx) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *RequestCtx) GetMethod() *conduit_common.HttpMethod {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *RequestCtx) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// A latency bucket, with a maximum value in tenths of a millisecond and a
// count of the times that latency was observed.
type LatencyBucket struct {
	// Maximum latency value in this bucket, value in tenths of a millisecond.
	MaxValue uint32 `protobuf:"varint,1,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	// Count of occurences of this latency value.
	Count uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *LatencyBucket) Reset()                    { *m = LatencyBucket{} }
func (m *LatencyBucket) String() string            { return proto.CompactTextString(m) }
func (*LatencyBucket) ProtoMessage()               {}
func (*LatencyBucket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *LatencyBucket) GetMaxValue() uint32 {
	if m != nil {
		return m.MaxValue
	}
	return 0
}

func (m *LatencyBucket) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ResponseScope struct {
	Ctx *ResponseCtx `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	// Response latencies (time from request headers sent to response headers received),
	// represented as an array of observed latency values with precision to 100µs and
	// the number of times those values were observed, ordered by the latency value.
	ResponseLatencies []*LatencyBucket `protobuf:"bytes,2,rep,name=response_latencies,json=responseLatencies" json:"response_latencies,omitempty"`
	Ends              []*EosScope      `protobuf:"bytes,3,rep,name=ends" json:"ends,omitempty"`
}

func (m *ResponseScope) Reset()                    { *m = ResponseScope{} }
func (m *ResponseScope) String() string            { return proto.CompactTextString(m) }
func (*ResponseScope) ProtoMessage()               {}
func (*ResponseScope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ResponseScope) GetCtx() *ResponseCtx {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *ResponseScope) GetResponseLatencies() []*LatencyBucket {
	if m != nil {
		return m.ResponseLatencies
	}
	return nil
}

func (m *ResponseScope) GetEnds() []*EosScope {
	if m != nil {
		return m.Ends
	}
	return nil
}

type ResponseCtx struct {
	HttpStatusCode uint32 `protobuf:"varint,1,opt,name=http_status_code,json=httpStatusCode" json:"http_status_code,omitempty"`
}

func (m *ResponseCtx) Reset()                    { *m = ResponseCtx{} }
func (m *ResponseCtx) String() string            { return proto.CompactTextString(m) }
func (*ResponseCtx) ProtoMessage()               {}
func (*ResponseCtx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ResponseCtx) GetHttpStatusCode() uint32 {
	if m != nil {
		return m.HttpStatusCode
	}
	return 0
}

type EosScope struct {
	Ctx     *EosCtx          `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Streams []*StreamSummary `protobuf:"bytes,2,rep,name=streams" json:"streams,omitempty"`
}

func (m *EosScope) Reset()                    { *m = EosScope{} }
func (m *EosScope) String() string            { return proto.CompactTextString(m) }
func (*EosScope) ProtoMessage()               {}
func (*EosScope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *EosScope) GetCtx() *EosCtx {
	if m != nil {
		return m.Ctx
	}
	return nil
}

func (m *EosScope) GetStreams() []*StreamSummary {
	if m != nil {
		return m.Streams
	}
	return nil
}

type EosCtx struct {
	// Types that are valid to be assigned to End:
	//	*EosCtx_GrpcStatusCode
	//	*EosCtx_ResetErrorCode
	//	*EosCtx_Other
	End isEosCtx_End `protobuf_oneof:"end"`
}

func (m *EosCtx) Reset()                    { *m = EosCtx{} }
func (m *EosCtx) String() string            { return proto.CompactTextString(m) }
func (*EosCtx) ProtoMessage()               {}
func (*EosCtx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type isEosCtx_End interface {
	isEosCtx_End()
}

type EosCtx_GrpcStatusCode struct {
	GrpcStatusCode uint32 `protobuf:"varint,1,opt,name=grpc_status_code,json=grpcStatusCode,oneof"`
}
type EosCtx_ResetErrorCode struct {
	ResetErrorCode uint32 `protobuf:"varint,2,opt,name=reset_error_code,json=resetErrorCode,oneof"`
}
type EosCtx_Other struct {
	Other bool `protobuf:"varint,3,opt,name=other,oneof"`
}

func (*EosCtx_GrpcStatusCode) isEosCtx_End() {}
func (*EosCtx_ResetErrorCode) isEosCtx_End() {}
func (*EosCtx_Other) isEosCtx_End()          {}

func (m *EosCtx) GetEnd() isEosCtx_End {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *EosCtx) GetGrpcStatusCode() uint32 {
	if x, ok := m.GetEnd().(*EosCtx_GrpcStatusCode); ok {
		return x.GrpcStatusCode
	}
	return 0
}

func (m *EosCtx) GetResetErrorCode() uint32 {
	if x, ok := m.GetEnd().(*EosCtx_ResetErrorCode); ok {
		return x.ResetErrorCode
	}
	return 0
}

func (m *EosCtx) GetOther() bool {
	if x, ok := m.GetEnd().(*EosCtx_Other); ok {
		return x.Other
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EosCtx) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EosCtx_OneofMarshaler, _EosCtx_OneofUnmarshaler, _EosCtx_OneofSizer, []interface{}{
		(*EosCtx_GrpcStatusCode)(nil),
		(*EosCtx_ResetErrorCode)(nil),
		(*EosCtx_Other)(nil),
	}
}

func _EosCtx_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EosCtx)
	// end
	switch x := m.End.(type) {
	case *EosCtx_GrpcStatusCode:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.GrpcStatusCode))
	case *EosCtx_ResetErrorCode:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ResetErrorCode))
	case *EosCtx_Other:
		t := uint64(0)
		if x.Other {
			t = 1
		}
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("EosCtx.End has unexpected type %T", x)
	}
	return nil
}

func _EosCtx_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EosCtx)
	switch tag {
	case 1: // end.grpc_status_code
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.End = &EosCtx_GrpcStatusCode{uint32(x)}
		return true, err
	case 2: // end.reset_error_code
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.End = &EosCtx_ResetErrorCode{uint32(x)}
		return true, err
	case 3: // end.other
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.End = &EosCtx_Other{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _EosCtx_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EosCtx)
	// end
	switch x := m.End.(type) {
	case *EosCtx_GrpcStatusCode:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.GrpcStatusCode))
	case *EosCtx_ResetErrorCode:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ResetErrorCode))
	case *EosCtx_Other:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StreamSummary struct {
	DurationMs uint64 `protobuf:"varint,1,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	BytesSent  uint64 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent" json:"bytes_sent,omitempty"`
	FramesSent uint32 `protobuf:"varint,3,opt,name=frames_sent,json=framesSent" json:"frames_sent,omitempty"`
}

func (m *StreamSummary) Reset()                    { *m = StreamSummary{} }
func (m *StreamSummary) String() string            { return proto.CompactTextString(m) }
func (*StreamSummary) ProtoMessage()               {}
func (*StreamSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StreamSummary) GetDurationMs() uint64 {
	if m != nil {
		return m.DurationMs
	}
	return 0
}

func (m *StreamSummary) GetBytesSent() uint64 {
	if m != nil {
		return m.BytesSent
	}
	return 0
}

func (m *StreamSummary) GetFramesSent() uint32 {
	if m != nil {
		return m.FramesSent
	}
	return 0
}

type ReportResponse struct {
}

func (m *ReportResponse) Reset()                    { *m = ReportResponse{} }
func (m *ReportResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportResponse) ProtoMessage()               {}
func (*ReportResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func init() {
	proto.RegisterType((*ReportRequest)(nil), "conduit.proxy.telemetry.ReportRequest")
	proto.RegisterType((*Process)(nil), "conduit.proxy.telemetry.Process")
	proto.RegisterType((*ServerTransport)(nil), "conduit.proxy.telemetry.ServerTransport")
	proto.RegisterType((*ClientTransport)(nil), "conduit.proxy.telemetry.ClientTransport")
	proto.RegisterType((*TransportSummary)(nil), "conduit.proxy.telemetry.TransportSummary")
	proto.RegisterType((*RequestScope)(nil), "conduit.proxy.telemetry.RequestScope")
	proto.RegisterType((*RequestCtx)(nil), "conduit.proxy.telemetry.RequestCtx")
	proto.RegisterType((*LatencyBucket)(nil), "conduit.proxy.telemetry.LatencyBucket")
	proto.RegisterType((*ResponseScope)(nil), "conduit.proxy.telemetry.ResponseScope")
	proto.RegisterType((*ResponseCtx)(nil), "conduit.proxy.telemetry.ResponseCtx")
	proto.RegisterType((*EosScope)(nil), "conduit.proxy.telemetry.EosScope")
	proto.RegisterType((*EosCtx)(nil), "conduit.proxy.telemetry.EosCtx")
	proto.RegisterType((*StreamSummary)(nil), "conduit.proxy.telemetry.StreamSummary")
	proto.RegisterType((*ReportResponse)(nil), "conduit.proxy.telemetry.ReportResponse")
	proto.RegisterEnum("conduit.proxy.telemetry.ReportRequest_Proxy", ReportRequest_Proxy_name, ReportRequest_Proxy_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Telemetry service

type TelemetryClient interface {
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
}

type telemetryClient struct {
	cc *grpc.ClientConn
}

func NewTelemetryClient(cc *grpc.ClientConn) TelemetryClient {
	return &telemetryClient{cc}
}

func (c *telemetryClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := grpc.Invoke(ctx, "/conduit.proxy.telemetry.Telemetry/Report", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Telemetry service

type TelemetryServer interface {
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
}

func RegisterTelemetryServer(s *grpc.Server, srv TelemetryServer) {
	s.RegisterService(&_Telemetry_serviceDesc, srv)
}

func _Telemetry_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conduit.proxy.telemetry.Telemetry/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Telemetry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "conduit.proxy.telemetry.Telemetry",
	HandlerType: (*TelemetryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _Telemetry_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy/telemetry/telemetry.proto",
}

func init() { proto.RegisterFile("proxy/telemetry/telemetry.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 900 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0x8f, 0x63, 0x3b, 0xb1, 0xc7, 0x75, 0xea, 0x6c, 0x11, 0x98, 0x00, 0x4a, 0x38, 0xa0, 0x18,
	0x04, 0x8e, 0x30, 0xb4, 0x48, 0xf0, 0x42, 0x9d, 0x56, 0x4a, 0x44, 0x9b, 0x46, 0xeb, 0x84, 0x17,
	0x1e, 0x4e, 0xd7, 0xbd, 0xa1, 0xb6, 0xf0, 0xed, 0x1e, 0xbb, 0x7b, 0x95, 0xfd, 0x80, 0xfa, 0x59,
	0x90, 0xf8, 0x4a, 0x7c, 0x06, 0x78, 0xe1, 0x3b, 0xa0, 0xdd, 0xbd, 0x3d, 0x9f, 0x4d, 0x1c, 0xf3,
	0xe7, 0xa5, 0x4f, 0xde, 0x99, 0xf9, 0xcd, 0x6f, 0xe7, 0xdf, 0x8e, 0x0f, 0x0e, 0x53, 0x29, 0x66,
	0xf3, 0x63, 0x8d, 0x53, 0x4c, 0x50, 0xcb, 0xd2, 0xa9, 0x9f, 0x4a, 0xa1, 0x05, 0x79, 0x83, 0x09,
	0x1e, 0x67, 0x13, 0xdd, 0xb7, 0xc0, 0x7e, 0x61, 0x3e, 0xb8, 0xc3, 0x44, 0x92, 0x08, 0x7e, 0xec,
	0x7e, 0x1c, 0x3a, 0xf8, 0xb5, 0x0a, 0x6d, 0x8a, 0xa9, 0x90, 0x9a, 0xe2, 0x4f, 0x19, 0x2a, 0x4d,
	0xbe, 0x82, 0xdd, 0x54, 0x0a, 0x86, 0x4a, 0x75, 0x2b, 0x47, 0x95, 0x5e, 0x6b, 0x70, 0xd4, 0x5f,
	0xc3, 0xd8, 0xbf, 0x70, 0x38, 0xea, 0x1d, 0xc8, 0x10, 0xea, 0x16, 0xd3, 0xdd, 0x3e, 0xaa, 0xf4,
	0xf6, 0x06, 0x9f, 0xac, 0xf5, 0x5c, 0xba, 0xd2, 0xf0, 0xcc, 0xe6, 0xd4, 0xb9, 0x92, 0x2b, 0xd8,
	0x57, 0x28, 0x5f, 0xa0, 0x0c, 0xb5, 0x8c, 0xb8, 0x32, 0x38, 0xd5, 0xad, 0x1e, 0x55, 0x7b, 0xad,
	0x41, 0x6f, 0x2d, 0xdf, 0xc8, 0x7a, 0x5c, 0x7a, 0x07, 0xda, 0x51, 0xcb, 0x0a, 0x65, 0x68, 0xd9,
	0x74, 0x82, 0x5c, 0x97, 0x69, 0x6b, 0x1b, 0x68, 0x4f, 0xac, 0x47, 0x89, 0x96, 0x2d, 0x2b, 0x14,
	0x79, 0x00, 0x0d, 0xe9, 0xb2, 0x50, 0xdd, 0xba, 0x65, 0xfb, 0xe0, 0x86, 0xa4, 0x2d, 0x70, 0xc4,
	0x44, 0x8a, 0xb4, 0x70, 0x0b, 0x02, 0xa8, 0xdb, 0x02, 0x90, 0x16, 0xec, 0x9e, 0x9d, 0x0f, 0x9f,
	0x5e, 0x9d, 0x3f, 0xec, 0x6c, 0x91, 0x5b, 0xd0, 0x78, 0x7a, 0x75, 0xe9, 0xa4, 0x4a, 0xf0, 0x33,
	0xec, 0xe6, 0xc5, 0x26, 0x04, 0x6a, 0x5c, 0xc4, 0x68, 0x9b, 0xd3, 0xa4, 0xf6, 0x4c, 0x3e, 0x05,
	0xa2, 0xd8, 0x18, 0xe3, 0x6c, 0x8a, 0x71, 0x38, 0xe1, 0x4a, 0x47, 0x9c, 0xa1, 0x6d, 0x42, 0x93,
	0xee, 0x17, 0x96, 0xb3, 0xdc, 0x40, 0x8e, 0xe1, 0xce, 0x02, 0xce, 0xa3, 0x04, 0x55, 0x1a, 0x31,
	0xec, 0x56, 0x2d, 0x7e, 0xc1, 0x74, 0xee, 0x2d, 0xc1, 0x1f, 0x15, 0xb8, 0xbd, 0x52, 0x62, 0x72,
	0x1f, 0x9a, 0x4a, 0x64, 0x92, 0x61, 0x38, 0x49, 0xf3, 0x49, 0x79, 0xb3, 0x48, 0x3d, 0x9f, 0xb1,
	0xb3, 0x8b, 0x07, 0x71, 0x2c, 0xcd, 0x88, 0x34, 0x1c, 0xf6, 0x2c, 0x25, 0x07, 0xd0, 0x60, 0x82,
	0x73, 0x64, 0x5a, 0xd9, 0x08, 0xdb, 0xb4, 0x90, 0xc9, 0xb7, 0xd0, 0x8a, 0x27, 0xaa, 0x30, 0xbb,
	0xae, 0x7f, 0xb4, 0xb6, 0xa0, 0x45, 0x30, 0xa3, 0x2c, 0x49, 0x22, 0x39, 0xa7, 0x65, 0x6f, 0xf2,
	0x05, 0x34, 0xec, 0x8c, 0x33, 0x31, 0xed, 0xd6, 0xec, 0x3c, 0x76, 0x57, 0xe3, 0xbb, 0xc8, 0xed,
	0xb4, 0x40, 0x06, 0x7f, 0x56, 0xe0, 0xf6, 0x4a, 0xdb, 0xc9, 0xd7, 0xd0, 0xd2, 0x91, 0x7c, 0x8e,
	0x3a, 0x8c, 0xe2, 0x58, 0xe6, 0xc9, 0x1e, 0xac, 0x92, 0x5d, 0xb2, 0xd4, 0x67, 0x0b, 0x0e, 0x6e,
	0xc4, 0x57, 0x3d, 0x5f, 0x0a, 0x9d, 0x55, 0x5a, 0x72, 0x08, 0xad, 0x38, 0x93, 0x91, 0x9e, 0x08,
	0x1e, 0x26, 0x6e, 0x0d, 0xd4, 0x28, 0x78, 0xd5, 0x13, 0x45, 0xde, 0x01, 0x78, 0x36, 0xd7, 0xa8,
	0x42, 0x85, 0x5c, 0xdb, 0xac, 0x6a, 0xb4, 0x69, 0x35, 0x23, 0xe4, 0x3a, 0xf8, 0xa5, 0x02, 0xb7,
	0xca, 0xc3, 0x4e, 0xee, 0x41, 0x95, 0xe9, 0x59, 0x5e, 0xb8, 0xf7, 0x36, 0x3d, 0x90, 0x13, 0x3d,
	0xa3, 0x06, 0x4f, 0x5e, 0x83, 0x3a, 0x13, 0x59, 0x7e, 0x43, 0x9b, 0x3a, 0x81, 0x3c, 0x84, 0xa6,
	0x44, 0x95, 0x0a, 0xae, 0xd0, 0x97, 0xec, 0xee, 0x0d, 0x94, 0x0e, 0xe9, 0x1e, 0xdd, 0xc2, 0x31,
	0xf8, 0xbd, 0x02, 0xb0, 0xb8, 0xef, 0x3f, 0x4f, 0xf3, 0xca, 0x68, 0x6c, 0xff, 0xab, 0xd1, 0x78,
	0x1b, 0x9a, 0x51, 0xa6, 0xc7, 0x42, 0x4e, 0xf4, 0x3c, 0x7f, 0x7d, 0x0b, 0x05, 0x19, 0xc0, 0x4e,
	0x82, 0x7a, 0x2c, 0x62, 0xdb, 0xcd, 0x6b, 0x58, 0x4f, 0xb5, 0x4e, 0x9f, 0x58, 0x04, 0xcd, 0x91,
	0x66, 0x39, 0xa4, 0x91, 0x1e, 0x77, 0xeb, 0x6e, 0x39, 0x98, 0x73, 0x30, 0x84, 0xf6, 0xe3, 0x48,
	0x23, 0x67, 0xf3, 0x61, 0xc6, 0x7e, 0x44, 0x4d, 0xde, 0x82, 0x66, 0x12, 0xcd, 0xc2, 0x17, 0xd1,
	0x34, 0x73, 0x6b, 0xa4, 0x4d, 0x1b, 0x49, 0x34, 0xfb, 0xce, 0xc8, 0xd7, 0xd7, 0x3c, 0xf8, 0xad,
	0x62, 0xfe, 0x26, 0x4a, 0xa5, 0x24, 0xf7, 0xcb, 0x2d, 0x7d, 0x7f, 0x63, 0xfd, 0x8b, 0x9e, 0x5e,
	0x01, 0xf1, 0x4d, 0x08, 0xa7, 0x36, 0xac, 0x09, 0x9a, 0x87, 0x71, 0x73, 0x1b, 0x97, 0x12, 0xa0,
	0xfb, 0x9e, 0xe1, 0xb1, 0x27, 0x20, 0xf7, 0xa0, 0x86, 0x3c, 0xf6, 0xf3, 0xf0, 0xee, 0x5a, 0xa2,
	0x47, 0x42, 0xb9, 0x51, 0xb0, 0xf0, 0xe0, 0x4b, 0x68, 0x95, 0x22, 0x24, 0x3d, 0xe8, 0x8c, 0xb5,
	0x4e, 0x43, 0xa5, 0x23, 0x9d, 0xa9, 0x90, 0xf9, 0x3d, 0xdb, 0xa6, 0x7b, 0x46, 0x3f, 0xb2, 0xea,
	0x13, 0x11, 0x63, 0xf0, 0x12, 0x1a, 0x9e, 0x8a, 0x7c, 0x56, 0x2e, 0xc5, 0xe1, 0x4d, 0x57, 0x17,
	0x55, 0xf8, 0x06, 0x76, 0x95, 0x96, 0x18, 0x25, 0x9b, 0x53, 0x1f, 0x59, 0x9c, 0x7f, 0xf1, 0xde,
	0x2d, 0x78, 0x09, 0x3b, 0x8e, 0x90, 0x7c, 0x0c, 0x9d, 0xe7, 0x32, 0x65, 0x7f, 0x0f, 0xfa, 0x74,
	0x8b, 0xee, 0x19, 0xcb, 0x22, 0x6c, 0x83, 0x95, 0xa8, 0x50, 0x87, 0x28, 0xa5, 0x90, 0x0e, 0xbb,
	0xed, 0xb1, 0xd6, 0xf2, 0xc8, 0x18, 0x2c, 0xf6, 0x75, 0xa8, 0x0b, 0x3d, 0x46, 0x69, 0x27, 0xb3,
	0x71, 0xba, 0x45, 0x9d, 0x38, 0xac, 0x43, 0x15, 0x79, 0x1c, 0xa4, 0xd0, 0x5e, 0x0a, 0xed, 0xff,
	0x6e, 0x0d, 0xe3, 0xff, 0x83, 0x34, 0x7f, 0x39, 0xce, 0x5e, 0xb5, 0x75, 0x07, 0xa7, 0xb2, 0x6b,
	0xa5, 0x03, 0x7b, 0xfe, 0xbb, 0xc1, 0xb5, 0x6c, 0x30, 0x86, 0xe6, 0xa5, 0x2f, 0x14, 0xf9, 0x1e,
	0x76, 0x9c, 0x99, 0xdc, 0xfd, 0x67, 0xdf, 0x1d, 0x07, 0x1f, 0x6e, 0xc4, 0xb9, 0x7b, 0x82, 0xad,
	0x67, 0x3b, 0x76, 0x61, 0x7e, 0xfe, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x43, 0x20, 0x50,
	0x7f, 0x09, 0x00, 0x00,
}
